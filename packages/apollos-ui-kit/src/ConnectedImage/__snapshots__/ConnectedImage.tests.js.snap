// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`the ConnectedImage component should maintain aspect ratio 1`] = `
<View
  onLayout={[Function]}
  pointerEvents="box-none"
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "paddingBottom": 0,
      "paddingLeft": 0,
      "paddingRight": 0,
      "paddingTop": 20,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <View
    onLayout={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
  />
  <View
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Array [
            Object {
              "aspectRatio": 1,
            },
            Object {
              "backgroundColor": "#A5A5A5",
            },
          ],
        ]
      }
    >
      <FastImageView
        onFastImageLoad={[Function]}
        resizeMode="cover"
        source={
          Object {
            "height": 150,
            "uri": "https://placeholdit.co/i/150x150?bg=eeeeee&fc=577084",
            "width": 150,
          }
        }
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
      />
    </View>
  </View>
</View>
`;

exports[`the ConnectedImage component should render 1`] = `
<View
  onLayout={[Function]}
  pointerEvents="box-none"
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "paddingBottom": 0,
      "paddingLeft": 0,
      "paddingRight": 0,
      "paddingTop": 20,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <View
    onLayout={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
  />
  <View
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Array [
            Object {},
            Object {
              "backgroundColor": "#A5A5A5",
            },
          ],
        ]
      }
    >
      <FastImageView
        onFastImageLoad={[Function]}
        resizeMode="cover"
        source={
          Object {
            "height": 150,
            "uri": "https://placeholdit.co/i/150x150?bg=eeeeee&fc=577084",
            "width": 150,
          }
        }
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
      />
    </View>
  </View>
</View>
`;

exports[`the ConnectedImage component should render a loading state 1`] = `
<View
  onLayout={[Function]}
  pointerEvents="box-none"
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "paddingBottom": 0,
      "paddingLeft": 0,
      "paddingRight": 0,
      "paddingTop": 20,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <View
    onLayout={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
  />
  <View
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Array [
            Object {},
            Object {
              "backgroundColor": "#A5A5A5",
            },
          ],
        ]
      }
    >
      <FastImageView
        onFastImageLoad={[Function]}
        resizeMode="cover"
        source={
          Object {
            "height": 150,
            "uri": "https://placeholdit.co/i/150x150?bg=eeeeee&fc=577084",
            "width": 150,
          }
        }
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
      />
    </View>
  </View>
</View>
`;

exports[`the ConnectedImage component should render between minAspectRatio and maxAspectRatio 1`] = `
<View
  onLayout={[Function]}
  pointerEvents="box-none"
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "paddingBottom": 0,
      "paddingLeft": 0,
      "paddingRight": 0,
      "paddingTop": 20,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <View
    onLayout={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
  />
  <View
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Array [
            Object {
              "aspectRatio": 1,
            },
            Object {
              "backgroundColor": "#A5A5A5",
            },
          ],
        ]
      }
    >
      <FastImageView
        maxAspectRatio={1.5}
        minAspectRatio={0.5}
        onFastImageLoad={[Function]}
        resizeMode="cover"
        source={
          Object {
            "height": 200,
            "uri": "https://picsum.photos/200/200/?random",
            "width": 200,
          }
        }
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
      />
    </View>
  </View>
</View>
`;

exports[`the ConnectedImage component should render with a maxAspectRatio 1`] = `
<View
  onLayout={[Function]}
  pointerEvents="box-none"
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "paddingBottom": 0,
      "paddingLeft": 0,
      "paddingRight": 0,
      "paddingTop": 20,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <View
    onLayout={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
  />
  <View
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Array [
            Object {
              "aspectRatio": 0.5,
            },
            Object {
              "backgroundColor": "#A5A5A5",
            },
          ],
        ]
      }
    >
      <FastImageView
        maxAspectRatio={0.5}
        onFastImageLoad={[Function]}
        resizeMode="cover"
        source={
          Object {
            "height": 200,
            "uri": "https://picsum.photos/200/200/?random",
            "width": 200,
          }
        }
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
      />
    </View>
  </View>
</View>
`;

exports[`the ConnectedImage component should render with a minAspectRatio 1`] = `
<View
  onLayout={[Function]}
  pointerEvents="box-none"
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "paddingBottom": 0,
      "paddingLeft": 0,
      "paddingRight": 0,
      "paddingTop": 20,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <View
    onLayout={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
  />
  <View
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Array [
            Object {
              "aspectRatio": 2,
            },
            Object {
              "backgroundColor": "#A5A5A5",
            },
          ],
        ]
      }
    >
      <FastImageView
        minAspectRatio={2}
        onFastImageLoad={[Function]}
        resizeMode="cover"
        source={
          Object {
            "height": 200,
            "uri": "https://picsum.photos/200/200/?random",
            "width": 200,
          }
        }
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
      />
    </View>
  </View>
</View>
`;

exports[`the ConnectedImage component should throw an error if maxAspectRatio is used without maintainAspectRatio 1`] = `
Array [
  Array [
    "Warning: Failed prop type:  Prop maintainAspectRatio is required for use with maxAspectRatio
    in mapProps(getContext(mapProps(withPropsOnChange(mapProps(ConnectedImage)))))",
  ],
  Array [
    "Warning: Failed prop type:  Prop maintainAspectRatio is required for use with maxAspectRatio
    in ConnectedImage (created by mapProps(ConnectedImage))
    in mapProps(ConnectedImage) (created by withPropsOnChange(mapProps(ConnectedImage)))
    in withPropsOnChange(mapProps(ConnectedImage)) (created by mapProps(withPropsOnChange(mapProps(ConnectedImage))))
    in mapProps(withPropsOnChange(mapProps(ConnectedImage))) (created by getContext(mapProps(withPropsOnChange(mapProps(ConnectedImage)))))
    in getContext(mapProps(withPropsOnChange(mapProps(ConnectedImage)))) (created by mapProps(getContext(mapProps(withPropsOnChange(mapProps(ConnectedImage))))))
    in mapProps(getContext(mapProps(withPropsOnChange(mapProps(ConnectedImage)))))
    in View
    in View
    in View
    in View
    in AnimatedComponent
    in SafeView
    in withOrientation
    in LayoutProvider (created by nest(ThemeProvider, LayoutProvider))
    in ThemeProvider (created by nest(ThemeProvider, LayoutProvider))
    in nest(ThemeProvider, LayoutProvider)",
  ],
]
`;

exports[`the ConnectedImage component should throw an error if minAspectRatio is used without maintainAspectRatio 1`] = `
Array [
  Array [
    "Warning: Failed prop type:  Prop maintainAspectRatio is required for use with minAspectRatio
    in mapProps(getContext(mapProps(withPropsOnChange(mapProps(ConnectedImage)))))",
  ],
  Array [
    "Warning: Failed prop type:  Prop maintainAspectRatio is required for use with minAspectRatio
    in ConnectedImage (created by mapProps(ConnectedImage))
    in mapProps(ConnectedImage) (created by withPropsOnChange(mapProps(ConnectedImage)))
    in withPropsOnChange(mapProps(ConnectedImage)) (created by mapProps(withPropsOnChange(mapProps(ConnectedImage))))
    in mapProps(withPropsOnChange(mapProps(ConnectedImage))) (created by getContext(mapProps(withPropsOnChange(mapProps(ConnectedImage)))))
    in getContext(mapProps(withPropsOnChange(mapProps(ConnectedImage)))) (created by mapProps(getContext(mapProps(withPropsOnChange(mapProps(ConnectedImage))))))
    in mapProps(getContext(mapProps(withPropsOnChange(mapProps(ConnectedImage)))))
    in View
    in View
    in View
    in View
    in AnimatedComponent
    in SafeView
    in withOrientation
    in LayoutProvider (created by nest(ThemeProvider, LayoutProvider))
    in ThemeProvider (created by nest(ThemeProvider, LayoutProvider))
    in nest(ThemeProvider, LayoutProvider)",
  ],
]
`;
